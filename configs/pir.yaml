substitutions:
  # these are able to be overridden on the command line
  name: default
  pin: '18'
  # these can be left alone unless they really need to be changed
  dname: ${name}-pir
  uname: ${name}_pir

esphome:
  name: $dname

esp32:
  board: adafruit_feather_esp32s3
  framework:
    type: arduino

# Enable logging
logger:

ota:
  password: ''

time:
  - platform: sntp
    id: the_time

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_ssid_password

api:
  reboot_timeout: 5min

button:
  - platform: restart
    name: ${uname} restart

# setup sensors
binary_sensor:
  - platform: gpio
    pin: ${pin}
    name: ${name} motion
    device_class: motion
    filters:
      - delayed_off: 2s
  - platform: status
    name: ${uname} status

sensor:
  - platform: wifi_signal
    name:  ${uname} wifi signal
    update_interval: 60s
  - platform: uptime
    id: uptime_seconds
    internal: true

text_sensor:
  - platform: template
    name: ${uname} uptime
    entity_category: diagnostic
    lambda: |-
      int seconds = (id(uptime_seconds).state);
      int days = seconds / (24 * 3600);
      seconds = seconds % (24 * 3600);
      int hours = seconds / 3600;
      seconds = seconds % 3600;
      int minutes = seconds /  60;
      seconds = seconds % 60;
      if ( days > 3650 ) {
        return { "Starting up" };
      } else if ( days ) {
        return { (String(days) +"d " + String(hours) +"h " + String(minutes) +"m "+ String(seconds) +"s").c_str() };
      } else if ( hours ) {
        return { (String(hours) +"h " + String(minutes) +"m "+ String(seconds) +"s").c_str() };
      } else if ( minutes ) {
        return { (String(minutes) +"m "+ String(seconds) +"s").c_str() };
      } else {
        return { (String(seconds) +"s").c_str() };
      }
    icon: mdi:clock-start
